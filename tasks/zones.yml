- name: ensure zones storage directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ item.storage }}"
    recurse: yes
    owner: "{{ knot_user }}"
    group: "{{ knot_group }}"
  with_items: "{{ knot_zones }}"

- name: apply zone files
  ansible.builtin.copy:
    src: "{{ item.src_file }}"
    dest: "{{ item.storage }}/{{ item.file }}"
    owner: "{{ knot_user }}"
    group: "{{ knot_group }}"
  with_items: "{{ knot_zones }}"
  when: item.src_file is defined

- name: check zone files integrity
  ansible.builtin.raw: "knotc zone-check {{ item.name }}"
  register: "results"
  with_items: "{{ knot_zones }}"
  ignore_errors: yes

- ansible.builtin.fail:
    msg: "A zone seems to be not loadable, please check. Trace:\n {{ item.stderr }}"
  when: item.rc != 0
  with_items: "{{Â results.results }}"

- name: reload knot
  ansible.builtin.service:
    name: "{{ knot_daemon }}"
    state: reloaded
